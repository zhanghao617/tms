<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haoyukeji.tms.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.haoyukeji.tms.entity.Role">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="role_code" jdbcType="VARCHAR" property="roleCode" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, role_name, create_time, update_time, role_code
  </sql>
  <select id="selectByExample" parameterType="com.haoyukeji.tms.entity.RoleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.haoyukeji.tms.entity.RoleExample">
    delete from role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.haoyukeji.tms.entity.Role">
    insert into role (id, role_name, create_time, 
      update_time, role_code)
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{roleCode,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.haoyukeji.tms.entity.Role" useGeneratedKeys="true" keyProperty="id">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="roleCode != null">
        role_code,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="roleCode != null">
        #{roleCode,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.haoyukeji.tms.entity.RoleExample" resultType="java.lang.Long">
    select count(*) from role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
    <select id="findAllPermission" resultMap="roleWithPermissionMap">
        SELECT
            role.*, permissions.id AS permissionsId,
            permissions.create_time AS permissionCreateTime,
            permissions_code,
            permissions_name,
            permissions_type,
            url,
            permissions.update_time AS permissionUpdateTime,
            parent_id
        FROM
            role
        LEFT JOIN permissions_has_role ON role.id = permissions_has_role.role_id
        LEFT JOIN permissions ON permissions.id = permissions_has_role.permissions_id
        ORDER BY
	        role.id DESC
    </select>
  <select id="findByIdWithPermission" resultMap="roleWithPermissionMap">
       SELECT
            role.*, permissions.id AS permissionsId,
            permissions.create_time AS permissionCreateTime,
            permissions_code,
            permissions_name,
            permissions_type,
            url,
            permissions.update_time AS permissionUpdateTime,
            parent_id
        FROM
            role
        LEFT JOIN permissions_has_role ON role.id = permissions_has_role.role_id
        LEFT JOIN permissions ON permissions.id = permissions_has_role.permissions_id
        where role.id = #{id}
     </select>
      <select id="findRoleByAccountId" resultType="com.haoyukeji.tms.entity.Role">
        SELECT
            *
        FROM
            role
        WHERE
            id IN (
                SELECT
                    role_id
                FROM
                    role_has_account
                WHERE
                    account_account_id = #{id}
            )
      </select>

      <resultMap id="roleWithPermissionMap" type="Role" extends="BaseResultMap">
        <collection property="permissionList" ofType="Permissions">
          <id property="id" column="permissionsId"/>
          <result property="parentId" column="parent_id"/>
          <result property="permissionsCode" column="permissions_code"/>
          <result property="permissionsName" column="permissions_name"/>
          <result property="permissionsType" column="permissions_type"/>
          <result property="url" column="url"/>
          <result property="createTime" column="permissionCreateTime"/>
          <result property="updateTime" column="permissionUpdateTime"/>
        </collection>
      </resultMap>
    <update id="updateByExampleSelective" parameterType="map">
    update role
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.roleName != null">
        role_name = #{record.roleName,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.roleCode != null">
        role_code = #{record.roleCode,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update role
    set id = #{record.id,jdbcType=INTEGER},
      role_name = #{record.roleName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      role_code = #{record.roleCode,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.haoyukeji.tms.entity.Role">
    update role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="roleCode != null">
        role_code = #{roleCode,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.haoyukeji.tms.entity.Role">
    update role
    set role_name = #{roleName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      role_code = #{roleCode,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>